package basic_exception;

class ExcDemo1 {
	public static void main(String[] args) {
		int num[] = new int[4];
		try {
			System.out.println("Before exception is generated");
			CheckForOther ob1 = new CheckForOther();
			// generating an index-out-of-bounds exception
			ob1.divideByZero();
			num[7] = 10;
			// it matters which exception comes first, like here
			// ArithmeticException will occur first
			// but now I have added try-catch block in divideByZero() method
			// too, exception will occur their first and not here which means
			// this try block will execute successfully, if not then that
			// ArithmeticException will be caught here
			System.out.println("this won't be displayed");
		}
		// catch is not called, rather program execution is transferred to it
		catch (ArrayIndexOutOfBoundsException exc) {
			System.out.println("Index out of bounds\nError: " + exc);
		}
		catch (ArithmeticException e) {
			System.out.println("Divided by zero: " + e);
		}
		System.out.println("After catch statement");
	}
}

/* every code within try block is monitered for exception. This includes
 * exceptions that might be generated by a method called from withing the try
 * block */

// let's check that

class CheckForOther {
	int divideByZero() {
		try {
			return 5 / 0;
		}
		catch (ArithmeticException e) {
			System.out.println("Exception in divideByZero()");
			return 0;
		}
	}
}
