!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
${BIN}	Makefile	/^${BIN}: ${OBJ}$/;"	t
${DEBUG_BIN}	Makefile	/^${DEBUG_BIN}: ${DEBUG_OBJ}$/;"	t
${DEBUG_DIR}/%.o	Makefile	/^${DEBUG_DIR}\/%.o: ${SRC_DIR}\/%.cpp$/;"	t
${OBJ_DIR}/%.o	Makefile	/^${OBJ_DIR}\/%.o: ${SRC_DIR}\/%.cpp$/;"	t
Algo	inc/phase_util.hpp	/^namespace Algo {$/;"	n
Algo	src/phase_util.cpp	/^namespace Algo {$/;"	n	file:
BIN	Makefile	/^BIN       = ${BIN_DIR}\/$(notdir $(realpath .))$/;"	m
BIN_DIR	Makefile	/^BIN_DIR   = bin$/;"	m
CC	Makefile	/^CC     = clang++$/;"	m
CDFLAG	Makefile	/^CDFLAG = -Wall -std=c++14 -g$/;"	m
DEBUG_BIN	Makefile	/^DEBUG_BIN = $(addprefix ${DEBUG_DIR}\/, $(notdir $(realpath .)))$/;"	m
DEBUG_DIR	Makefile	/^DEBUG_DIR = debug$/;"	m
DEBUG_OBJ	Makefile	/^DEBUG_OBJ = $(addprefix ${DEBUG_DIR}\/, $(notdir ${SRC:.cpp=.o}))$/;"	m
DIRS	Makefile	/^DIRS      = ${BIN_DIR} ${OBJ_DIR} ${DEBUG_DIR}$/;"	m
INC_DIR	Makefile	/^INC_DIR   = inc$/;"	m
Individual	inc/phase_util.hpp	/^	class Individual {$/;"	c	namespace:Algo
Individual	src/phase_util.cpp	/^	Individual::Individual() {$/;"	f	class:Algo::Individual
LD	Makefile	/^LD     = clang++$/;"	m
OBJ	Makefile	/^OBJ       = $(addprefix ${OBJ_DIR}\/, $(notdir ${SRC:.cpp=.o}))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR   = obj$/;"	m
Population	inc/phase_util.hpp	/^	class Population {$/;"	c	namespace:Algo
Population	src/phase_util.cpp	/^	Population::Population(size_t size):_individuals(size), _fittest(0) {}$/;"	f	class:Algo::Population
SRC	Makefile	/^SRC       = $(wildcard ${SRC_DIR}\/*.cpp)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR   = src$/;"	m
Simple_Demo_Ga	inc/phase_util.hpp	/^	class Simple_Demo_Ga {$/;"	c	namespace:Algo
Simple_Demo_Ga	src/phase_util.cpp	/^	Simple_Demo_Ga::Simple_Demo_Ga(size_t count):_population(count), _generation_count(0) {}$/;"	f	class:Algo::Simple_Demo_Ga
_fitness	inc/phase_util.hpp	/^			int _fitness;$/;"	m	class:Algo::Individual	typeref:typename:int
_fittest	inc/phase_util.hpp	/^			Individual _fittest;$/;"	m	class:Algo::Simple_Demo_Ga	typeref:typename:Individual
_fittest	inc/phase_util.hpp	/^			int _fittest;$/;"	m	class:Algo::Population	typeref:typename:int
_generation_count	inc/phase_util.hpp	/^			int _generation_count;$/;"	m	class:Algo::Simple_Demo_Ga	typeref:typename:int
_genes	inc/phase_util.hpp	/^			std::array<int, 5> _genes;$/;"	m	class:Algo::Individual	typeref:typename:std::array<int,5>
_individuals	inc/phase_util.hpp	/^			std::vector<Individual> _individuals;$/;"	m	class:Algo::Population	typeref:typename:std::vector<Individual>
_population	inc/phase_util.hpp	/^			Population _population;$/;"	m	class:Algo::Simple_Demo_Ga	typeref:typename:Population
_second_fittest	inc/phase_util.hpp	/^			Individual _second_fittest;$/;"	m	class:Algo::Simple_Demo_Ga	typeref:typename:Individual
add_fittest_offspring	src/phase_util.cpp	/^	void Simple_Demo_Ga::add_fittest_offspring() {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:void
all	Makefile	/^all: dir ${BIN}$/;"	t
calc_fitness	src/phase_util.cpp	/^	void Individual::calc_fitness() {$/;"	f	class:Algo::Individual	typeref:typename:void
calculate_fitness	src/phase_util.cpp	/^	void Population::calculate_fitness() {$/;"	f	class:Algo::Population	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
crossover	src/phase_util.cpp	/^	void Simple_Demo_Ga::crossover() {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:void
debug	Makefile	/^debug: dir ${DEBUG_BIN}$/;"	t
dir	Makefile	/^dir:$/;"	t
get_fitness	src/phase_util.cpp	/^	int Individual::get_fitness() const { return this->_fitness; }$/;"	f	class:Algo::Individual	typeref:typename:int
get_fittest	src/phase_util.cpp	/^	Individual Population::get_fittest() {$/;"	f	class:Algo::Population	typeref:typename:Individual
get_fittest_offspring	src/phase_util.cpp	/^	Individual Simple_Demo_Ga::get_fittest_offspring() {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:Individual
get_fittest_value	src/phase_util.cpp	/^	int Population::get_fittest_value() const { return this->_fittest; }$/;"	f	class:Algo::Population	typeref:typename:int
get_gene_length	src/phase_util.cpp	/^	size_t Individual::get_gene_length() const { return this->_genes.size(); }$/;"	f	class:Algo::Individual	typeref:typename:size_t
get_generation_count	src/phase_util.cpp	/^	int Simple_Demo_Ga::get_generation_count() const {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:int
get_genes	src/phase_util.cpp	/^	int Individual::get_genes(size_t index) const {$/;"	f	class:Algo::Individual	typeref:typename:int
get_individual	src/phase_util.cpp	/^	Individual Population::get_individual(size_t index) const {$/;"	f	class:Algo::Population	typeref:typename:Individual
get_least_fittest_index	src/phase_util.cpp	/^	size_t Population::get_least_fittest_index() const {$/;"	f	class:Algo::Population	typeref:typename:size_t
get_population	src/phase_util.cpp	/^	Population Simple_Demo_Ga::get_population() const {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:Population
get_second_fittest	src/phase_util.cpp	/^	Individual Population::get_second_fittest() const {$/;"	f	class:Algo::Population	typeref:typename:Individual
main	src/main.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mutation	src/phase_util.cpp	/^	void Simple_Demo_Ga::mutation() {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:void
selection	src/phase_util.cpp	/^	void Simple_Demo_Ga::selection() {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:void
set_fittest	src/phase_util.cpp	/^	void Population::set_fittest(int value) {$/;"	f	class:Algo::Population	typeref:typename:void
set_generation_count	src/phase_util.cpp	/^	void Simple_Demo_Ga::set_generation_count(size_t count) {$/;"	f	class:Algo::Simple_Demo_Ga	typeref:typename:void
set_genes	src/phase_util.cpp	/^	void Individual::set_genes(int index, int value) {$/;"	f	class:Algo::Individual	typeref:typename:void
set_individual	src/phase_util.cpp	/^	void Population::set_individual(size_t index, Individual new_individual) {$/;"	f	class:Algo::Population	typeref:typename:void
