!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
0	.vscode/launch.json	/^                {$/;"	o	array:configurations.0.setupCommands
0	.vscode/launch.json	/^        {$/;"	o	array:configurations
A	prac1/pointr/pointer.c	/^	int A;$/;"	m	struct:__anonb74f5ae80108	typeref:typename:int	file:
B	prac1/pointr/pointer.c	/^	int B;$/;"	m	struct:__anonb74f5ae80108	typeref:typename:int	file:
BinarySearch	binsearchtest.c	/^void BinarySearch(int a[], int key, int n){$/;"	f	typeref:typename:void
Bsearch	data_structure/binarySearch.c	/^void Bsearch(int *a, int k, int n){$/;"	f	typeref:typename:void
Bsort	data_structure/binarySearch.c	/^void Bsort(int *a, int n){$/;"	f	typeref:typename:void
Bsort	data_structure/bubbleSort.c	/^void Bsort(int* a, int n){$/;"	f	typeref:typename:void
Combine	data_structure/mergeSort.c	/^void Combine(int *a, int beg, int mid, int end){$/;"	f	typeref:typename:void
DELETE	data_structure/queueOperation1.c	/^int DELETE(void){$/;"	f	typeref:typename:int
DEQUEUE	circularQueue2.c	/^struct cirqueue *DEQUEUE(struct cirqueue *q){$/;"	f	typeref:struct:cirqueue *
DEQUEUE	data_structure/circularQueue1.c	/^int DEQUEUE(void){\/\/can't use void as data type else it will give error, check function callin/;"	f	typeref:typename:int
DEQUEUE	data_structure/queueOperation2.c	/^struct queue *DEQUEUE(struct queue *q){$/;"	f	typeref:struct:queue *
DISPLAY	circularQueue2.c	/^struct cirqueue *DISPLAY(struct cirqueue *q){$/;"	f	typeref:struct:cirqueue *
DISPLAY	data_structure/circularQueue1.c	/^void DISPLAY(){$/;"	f	typeref:typename:void
DISPLAY	data_structure/queueOperation1.c	/^void DISPLAY(){$/;"	f	typeref:typename:void
DISPLAY	data_structure/queueOperation2.c	/^struct queue *DISPLAY(struct queue *q){$/;"	f	typeref:struct:queue *
DISPLAY	data_structure/stackOperation1.c	/^void DISPLAY(){$/;"	f	typeref:typename:void
ENQUEUE	circularQueue2.c	/^struct cirqueue *ENQUEUE(struct cirqueue *q, int val){$/;"	f	typeref:struct:cirqueue *
ENQUEUE	data_structure/circularQueue1.c	/^void ENQUEUE(){$/;"	f	typeref:typename:void
ENQUEUE	data_structure/queueOperation2.c	/^struct queue* ENQUEUE(struct queue *q, int val){\/\/void can't be used because we are taking ret/;"	f	typeref:struct:queue *
FOREVER	prac1/happy-number.c	/^#define FOREVER /;"	d	file:
Fact	factorial.c	/^int Fact(int n){$/;"	f	typeref:typename:int
INSERT	data_structure/queueOperation1.c	/^void INSERT(){$/;"	f	typeref:typename:void
Intersection	dstl_practicals/uniandint.c	/^void Intersection(int a[], int b[], int m, int n)$/;"	f	typeref:typename:void
Lsearch	data_structure/linearSearch.c	/^void Lsearch(int *a, int k, int n){$/;"	f	typeref:typename:void
MIMode	.vscode/launch.json	/^            "MIMode": "gdb",$/;"	s	object:configurations.0
Max	maxrecursion.c	/^void Max(int a[], int n){$/;"	f	typeref:typename:void
Max1	MergeArray.c	/^#define Max1 /;"	d	file:
Max2	MergeArray.c	/^#define Max2 /;"	d	file:
NULL	prac1/pointr/pointer.c	/^#define NULL /;"	d	file:
PEEK	data_structure/circularQueue1.c	/^int PEEK(void){$/;"	f	typeref:typename:int
PEEK	data_structure/queueOperation1.c	/^int PEEK(void){$/;"	f	typeref:typename:int
PEEK	data_structure/queueOperation2.c	/^int PEEK(struct queue *q){$/;"	f	typeref:typename:int
POP	data_structure/stackOperation1.c	/^void POP(){$/;"	f	typeref:typename:void
PUSH	data_structure/stackOperation1.c	/^void PUSH(){$/;"	f	typeref:typename:void
Partition	data_structure/quickSort.c	/^int Partition(int *a,int beg,int end){$/;"	f	typeref:typename:int
PrintStack	hackerrank_practice/equal_cylinder_stack3.c	/^#define PrintStack(/;"	d	file:
QuickSort	data_structure/quickSort.c	/^void QuickSort(int *a,int beg,int end){$/;"	f	typeref:typename:void
Sorting	data_structure/mergeSort.c	/^void Sorting(int *a,int beg,int end){$/;"	f	typeref:typename:void
StructType	prac1/pointr/pointer.c	/^} StructType;$/;"	t	typeref:struct:__anonb74f5ae80108	file:
Sum	hackerrank_practice/array_que.c	/^void Sum(char s1[], char s2[], int a, int b) {$/;"	f	typeref:typename:void
Sum	prac1/array_que.c	/^void Sum(char s1[], char s2[], int a, int b) {$/;"	f	typeref:typename:void
Union	dstl_practicals/uniandint.c	/^void Union(int a[], int b[], int m, int n)$/;"	f	typeref:typename:void
__anon42a3d8c20108	hackerrank_practice/equal_cylinder_stack3.c	/^{$/;"	s	file:
__anonb74f5ae80108	prac1/pointr/pointer.c	/^typedef struct {$/;"	s	file:
__anond6869a500103	instacode.c	/^enum{false,true};$/;"	g	file:
a	array1.c	/^int a[5][5], i, j, rc;$/;"	v	typeref:typename:int[5][5]
a	data_structure/circularQueue1.c	/^int a[size],front=-1,rear=-1;$/;"	v	typeref:typename:int[]
a	data_structure/queueOperation1.c	/^int a[size], f = -1, r = -1;$/;"	v	typeref:typename:int[]
a	data_structure/stackOperation1.c	/^int a[size],ch,i=-1,data,c;$/;"	v	typeref:typename:int[]
a	dstl_practicals/unionset.c	/^int a[size],b[size],c[size];$/;"	v	typeref:typename:int[]
a	hackerrank_practice/smalltri_largetri1.c	/^	int a, b, c;$/;"	m	struct:triangle	typeref:typename:int	file:
a	prac1/gcd_two_numbers.py	/^a = int(input('Enter the first number: '))$/;"	v
a	prac1/permutation_numbers.c	/^	int a, b, c;$/;"	m	struct:new	typeref:typename:int	file:
addafter	opll.c	/^void addafter(struct node **q, int loc, int num){$/;"	f	typeref:typename:void
addtobeg	opll.c	/^void addtobeg(struct node **q, int num){$/;"	f	typeref:typename:void
append	opll.c	/^void append(struct node **q, int num){$/;"	f	typeref:typename:void
args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.0
arrst	data_structure/stackOperation.c	/^int arrst[size], top = -1;$/;"	v	typeref:typename:int[]
at	os_assign/sjf_algo.c	/^	int at;$/;"	m	struct:given	typeref:typename:int	file:
b	dstl_practicals/unionset.c	/^int a[size],b[size],c[size];$/;"	v	typeref:typename:int[][]
b	hackerrank_practice/smalltri_largetri1.c	/^	int a, b, c;$/;"	m	struct:triangle	typeref:typename:int	file:
b	prac1/gcd_two_numbers.py	/^b = int(input('Enter the second number: '))$/;"	v
b	prac1/permutation_numbers.c	/^	int a, b, c;$/;"	m	struct:new	typeref:typename:int	file:
box	hackerrank_practice/box_through_a_tunnel.c	/^struct box {$/;"	s	file:
box	hackerrank_practice/box_through_a_tunnel.c	/^typedef struct box box;$/;"	t	typeref:struct:box	file:
bt	os_assign/sjf_algo.c	/^	int bt;$/;"	m	struct:given	typeref:typename:int	file:
c	data_structure/stackOperation1.c	/^int a[size],ch,i=-1,data,c;$/;"	v	typeref:typename:int[]
c	dstl_practicals/unionset.c	/^int a[size],b[size],c[size];$/;"	v	typeref:typename:int[][][]
c	hackerrank_practice/smalltri_largetri1.c	/^	int a, b, c;$/;"	m	struct:triangle	typeref:typename:int	file:
c	prac1/permutation_numbers.c	/^	int a, b, c;$/;"	m	struct:new	typeref:typename:int	file:
calculate_the_maximum	hackerrank_practice/bitwise-operators-in-c-English.c	/^void calculate_the_maximum(int n, int k) {$/;"	f	typeref:typename:void
calculate_the_maximum	hackerrank_practice/bitwise-operators-in-c-English1.c	/^void calculate_the_maximum(int n, int k) {$/;"	f	typeref:typename:void
ch	data_structure/stackOperation1.c	/^int a[size],ch,i=-1,data,c;$/;"	v	typeref:typename:int[]
check_loop	data_structure/loop_singlell.c	/^struct node *check_loop(struct node *root) {$/;"	f	typeref:struct:node *
circqueue	circularQueue2.c	/^struct circqueue{$/;"	s	file:
configurations	.vscode/launch.json	/^    "configurations": [$/;"	a
count	opll.c	/^int count(struct node *q){$/;"	f	typeref:typename:int
create	data_structure/circularlinkedlist.c	/^struct node *create(struct node *start){$/;"	f	typeref:struct:node *
create	psinglylinkedlist.c	/^struct node *create = NULL;$/;"	v	typeref:struct:node *
create_ll	data_structure/doublylinkedlist.c	/^struct node *create_ll(struct node *start)$/;"	f	typeref:struct:node *
create_ll	data_structure/doublyll.c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	data_structure/loop_singlell.c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	data_structure/merge_2_sortedll.c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	data_structure/merge_sort_singlell.c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	data_structure/reverse_singlelinkedlist.c	/^struct node *create_ll(struct node *root)$/;"	f	typeref:struct:node *
create_ll	data_structure/singlelinkedlist.c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	hackerrank_practice/remove_friend(singlell_deletion).c	/^struct node *create_ll(struct node *root) {$/;"	f	typeref:struct:node *
create_ll	psinglylinkedlist.c	/^struct node *create_ll(struct node *start){$/;"	f	typeref:struct:node *
cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.0
data	OperationLinkedList.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
data	circularQueue2.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/circularlinkedlist.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/doublylinkedlist.c	/^int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/doublyll.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/loop_singlell.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/merge_2_sortedll.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/merge_sort_singlell.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/queueOperation2.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/queue_with_stack.c	/^	int data;$/;"	m	struct:stq	typeref:typename:int	file:
data	data_structure/reverse_singlelinkedlist.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/singlelinkedlist.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	data_structure/stackOperation1.c	/^int a[size],ch,i=-1,data,c;$/;"	v	typeref:typename:int[]
data	data_structure/stackOperation2.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	hackerrank_practice/doublell_insertatend.c	/^	char data;$/;"	m	struct:node	typeref:typename:char	file:
data	hackerrank_practice/equal_cylinder_stack2.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	hackerrank_practice/hurdle_and_jump.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	hackerrank_practice/max_element(stack).c	/^	int data;$/;"	m	struct:stack	typeref:typename:int	file:
data	hackerrank_practice/remove_friend(singlell_deletion).c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	opll.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
data	prac1/linkedlist/addatstart.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	prac1/linkedlist/appendinlist.c	/^	int data;$/;"	m	struct:node	typeref:typename:int	file:
data	psinglylinkedlist.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
del	opll.c	/^void del(struct node **q, int num){$/;"	f	typeref:typename:void
delete_after	data_structure/circularlinkedlist.c	/^struct node *delete_after(struct node *start)$/;"	f	typeref:struct:node *
delete_after	data_structure/doublylinkedlist.c	/^struct node *delete_after(struct node *start)$/;"	f	typeref:struct:node *
delete_after	data_structure/doublyll.c	/^struct node *delete_after(struct node *root) {$/;"	f	typeref:struct:node *
delete_after	data_structure/singlelinkedlist.c	/^struct node *delete_after(struct node *start) {$/;"	f	typeref:struct:node *
delete_before	data_structure/doublylinkedlist.c	/^struct node *delete_before(struct node *start)$/;"	f	typeref:struct:node *
delete_before	data_structure/doublyll.c	/^struct node *delete_before(struct node *root) {$/;"	f	typeref:struct:node *
delete_beg	data_structure/circularlinkedlist.c	/^struct node *delete_beg(struct node *start)$/;"	f	typeref:struct:node *
delete_beg	data_structure/doublylinkedlist.c	/^struct node *delete_beg(struct node *start)$/;"	f	typeref:struct:node *
delete_beg	data_structure/doublyll.c	/^struct node *delete_beg(struct node *root) {$/;"	f	typeref:struct:node *
delete_beg	data_structure/singlelinkedlist.c	/^struct node *delete_beg(struct node *root) {$/;"	f	typeref:struct:node *
delete_end	data_structure/circularlinkedlist.c	/^struct node *delete_end(struct node *start)$/;"	f	typeref:struct:node *
delete_end	data_structure/doublylinkedlist.c	/^struct node *delete_end(struct node *start)$/;"	f	typeref:struct:node *
delete_end	data_structure/doublyll.c	/^struct node *delete_end(struct node *root) {$/;"	f	typeref:struct:node *
delete_end	data_structure/singlelinkedlist.c	/^struct node *delete_end(struct node *root) {$/;"	f	typeref:struct:node *
delete_list	data_structure/circularlinkedlist.c	/^struct node *delete_list(struct node *start)$/;"	f	typeref:struct:node *
delete_list	data_structure/doublylinkedlist.c	/^struct node *delete_list(struct node *start)$/;"	f	typeref:struct:node *
delete_list	data_structure/doublyll.c	/^struct node *delete_list(struct node *root) {$/;"	f	typeref:struct:node *
delete_list	data_structure/singlelinkedlist.c	/^struct node *delete_list(struct node *root) {$/;"	f	typeref:struct:node *
delete_node	data_structure/singlelinkedlist.c	/^struct node *delete_node(struct node *root) {$/;"	f	typeref:struct:node *
deleteallnodes	hackerrank_practice/hurdle_and_jump.c	/^void deleteallnodes(struct node *root) {$/;"	f	typeref:typename:void
deque	data_structure/queue_with_stack.c	/^void deque(struct stq *root1, struct stq *root2) {$/;"	f	typeref:typename:void
description	.vscode/launch.json	/^                    "description": "Enable pretty-printing for gdb",$/;"	s	object:configurations.0.setupCommands.0
display	MergeArray.c	/^void display(int *arr,int size){$/;"	f	typeref:typename:void
display	data_structure/circularlinkedlist.c	/^struct node *display(struct node *start){$/;"	f	typeref:struct:node *
display	data_structure/doublylinkedlist.c	/^struct node *display(struct node *start)$/;"	f	typeref:struct:node *
display	data_structure/doublyll.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	data_structure/loop_singlell.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	data_structure/merge_2_sortedll.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	data_structure/merge_sort_singlell.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	data_structure/reverse_singlelinkedlist.c	/^struct node *display(struct node *root)$/;"	f	typeref:struct:node *
display	data_structure/singlelinkedlist.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	data_structure/stackOperation.c	/^void display(int *arrst) {$/;"	f	typeref:typename:void
display	data_structure/stackOperation2.c	/^struct node *display(struct node *top) {$/;"	f	typeref:struct:node *
display	hackerrank_practice/doublell_insertatend.c	/^struct node *display(struct node *root)$/;"	f	typeref:struct:node *
display	hackerrank_practice/equal_cylinder_stack1.c	/^void display(int *h1, int i) {$/;"	f	typeref:typename:void
display	hackerrank_practice/equal_cylinder_stack2.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	hackerrank_practice/hurdle_and_jump.c	/^struct node *display(struct node *root) {$/;"	f	typeref:struct:node *
display	hackerrank_practice/stack.c	/^void display(int *st) {$/;"	f	typeref:typename:void
display	opll.c	/^void display(struct node *q){$/;"	f	typeref:typename:void
display	os_assign/sjf_algo.c	/^struct given* display(struct given* root) {$/;"	f	typeref:struct:given *
display_front	data_structure/queue_with_stack.c	/^int display_front(struct stq *root1) {$/;"	f	typeref:typename:int
display_mat	array1.c	/^void display_mat(int c[5][5], int n){$/;"	f	typeref:typename:void
enque	data_structure/queue_with_stack.c	/^struct stq *enque(struct stq *root1, int val) {$/;"	f	typeref:struct:stq *
entry	os_assign/sjf_algo.c	/^struct given* entry(struct given* root, int i) {$/;"	f	typeref:struct:given *
environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.0
externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.0
f	data_structure/queueOperation1.c	/^int a[size], f = -1, r = -1;$/;"	v	typeref:typename:int[]
factorial	prac1/permutation_numbers.c	/^int factorial(int f) {$/;"	f	typeref:typename:int
find_nth_term	hackerrank_practice/nth_term_recursion.c	/^int find_nth_term(int n, int a, int b, int c) {$/;"	f	typeref:typename:int
firstsort	hackerrank_practice/sorting_array_of_strings.c	/^void firstsort(int count, char **arr) {$/;"	f	typeref:typename:void
flot	intofloat.c	/^float flot(int i)$/;"	f	typeref:typename:float
fourthsort	hackerrank_practice/sorting_array_of_strings.c	/^void fourthsort(int count, char **wordlist) {$/;"	f	typeref:typename:void
freethelist	hackerrank_practice/equal_cylinder_stack2.c	/^void freethelist(struct node *root) {$/;"	f	typeref:typename:void
front	circularQueue2.c	/^    struct node *front;$/;"	m	struct:circqueue	typeref:struct:node *	file:
front	data_structure/circularQueue1.c	/^int a[size],front=-1,rear=-1;$/;"	v	typeref:typename:int[]
front	data_structure/queueOperation2.c	/^	struct node *front;$/;"	m	struct:queue	typeref:struct:node *	file:
fun	prac1/pointr/func_pointer1.c	/^void fun(int a) {$/;"	f	typeref:typename:void
function	testcss1.c	/^void function(char *input) {$/;"	f	typeref:typename:void
gcd	hackerrank_practice/common_gcd_recursion.c	/^int gcd(int n1, int n2) {$/;"	f	typeref:typename:int
gcd	prac1/gcd_two_numbers.py	/^gcd = 1$/;"	v
getHighestStack	hackerrank_practice/equal_cylinder_stack3.c	/^int getHighestStack(stack Stack1, stack Stack2, stack Stack3)() {$/;"	f	typeref:typename:int
get_gcd	prac1/gcd_two_numbers.py	/^def get_gcd(a, b):$/;"	f
get_max	hackerrank_practice/bitwise-operators-in-c-English.c	/^void get_max(int *arr4, int l, int k) {$/;"	f	typeref:typename:void
get_min	prac1/gcd_two_numbers.py	/^def get_min(a, b):$/;"	f
get_volume	hackerrank_practice/box_through_a_tunnel.c	/^int get_volume(box b) {$/;"	f	typeref:typename:int
getcommonheight	hackerrank_practice/equal_cylinder_stack3.c	/^int getcommonheight(Stack1, Stack2, Stack3)() {$/;"	f	typeref:typename:int
getcylindersizes	hackerrank_practice/equal_cylinder_stack3.c	/^void getcylindersizes(stack Stack)() {$/;"	f	typeref:typename:void
given	os_assign/sjf_algo.c	/^struct given {$/;"	s	file:
height	hackerrank_practice/box_through_a_tunnel.c	/^	int length, width, height;$/;"	m	struct:box	typeref:typename:int	file:
hurdle_heights	hackerrank_practice/hurdle_and_jump.c	/^struct node *hurdle_heights(struct node *root) {$/;"	f	typeref:struct:node *
hurdle_num	hackerrank_practice/hurdle_and_jump.c	/^int hurdle_num, max_jump;$/;"	v	typeref:typename:int
i	array1.c	/^int a[5][5], i, j, rc;$/;"	v	typeref:typename:int[5][5]
i	array3.c	/^int i, j, mat[3][3];$/;"	v	typeref:typename:int
i	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
i	data_structure/stackOperation1.c	/^int a[size],ch,i=-1,data,c;$/;"	v	typeref:typename:int[]
i	dstl_practicals/unionset.c	/^int x,y,i,j;$/;"	v	typeref:typename:int
ignoreFailures	.vscode/launch.json	/^                    "ignoreFailures": true$/;"	b	object:configurations.0.setupCommands.0
inc	callbyref.c	/^void inc(int *n)$/;"	f	typeref:typename:void
inc	callbyvalue.c	/^int inc(int n)$/;"	f	typeref:typename:int
insert	MergeArray.c	/^int *insert(int size){$/;"	f	typeref:typename:int *
insert_after	data_structure/doublylinkedlist.c	/^struct node *insert_after(struct node *start)$/;"	f	typeref:struct:node *
insert_after	data_structure/doublyll.c	/^struct node *insert_after(struct node *root) {$/;"	f	typeref:struct:node *
insert_after	data_structure/singlelinkedlist.c	/^struct node *insert_after(struct node *root) {$/;"	f	typeref:struct:node *
insert_before	data_structure/doublylinkedlist.c	/^struct node *insert_before(struct node *start)$/;"	f	typeref:struct:node *
insert_before	data_structure/doublyll.c	/^struct node *insert_before(struct node *root) {$/;"	f	typeref:struct:node *
insert_before	data_structure/singlelinkedlist.c	/^struct node *insert_before(struct node *root) {$/;"	f	typeref:struct:node *
insert_beg	data_structure/circularlinkedlist.c	/^struct node *insert_beg(struct node *start){$/;"	f	typeref:struct:node *
insert_beg	data_structure/doublylinkedlist.c	/^struct node *insert_beg(struct node *start)$/;"	f	typeref:struct:node *
insert_beg	data_structure/doublyll.c	/^struct node *insert_beg(struct node *root) {$/;"	f	typeref:struct:node *
insert_beg	data_structure/singlelinkedlist.c	/^struct node *insert_beg(struct node *root) {$/;"	f	typeref:struct:node *
insert_end	data_structure/circularlinkedlist.c	/^struct node *insert_end(struct node *start){$/;"	f	typeref:struct:node *
insert_end	data_structure/doublylinkedlist.c	/^struct node *insert_end(struct node *start)$/;"	f	typeref:struct:node *
insert_end	data_structure/doublyll.c	/^struct node *insert_end(struct node *root) {$/;"	f	typeref:struct:node *
insert_end	data_structure/singlelinkedlist.c	/^struct node *insert_end(struct node *root) {$/;"	f	typeref:struct:node *
insert_end	hackerrank_practice/doublell_insertatend.c	/^struct node *insert_end(struct node *root)$/;"	f	typeref:struct:node *
inte	intofloat.c	/^int inte(float f) {$/;"	f	typeref:typename:int
is_lower_than_max_height	hackerrank_practice/box_through_a_tunnel.c	/^int is_lower_than_max_height(box b) {$/;"	f	typeref:typename:int
j	array1.c	/^int a[5][5], i, j, rc;$/;"	v	typeref:typename:int[5][5]
j	array3.c	/^int i, j, mat[3][3];$/;"	v	typeref:typename:int
j	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
j	dstl_practicals/unionset.c	/^int x,y,i,j;$/;"	v	typeref:typename:int
j	maxrecursion.c	/^int j=0;$/;"	v	typeref:typename:int
k	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
k	dstl_practicals/unionset.c	/^	int k;$/;"	v	typeref:typename:int
length	hackerrank_practice/box_through_a_tunnel.c	/^	int length, width, height;$/;"	m	struct:box	typeref:typename:int	file:
link	data_structure/loop_singlell.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	data_structure/merge_2_sortedll.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	data_structure/merge_sort_singlell.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	data_structure/queue_with_stack.c	/^	struct stq *link;$/;"	m	struct:stq	typeref:struct:stq *	file:
link	data_structure/reverse_singlelinkedlist.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	data_structure/singlelinkedlist.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	data_structure/stackOperation2.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	hackerrank_practice/equal_cylinder_stack2.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	hackerrank_practice/hurdle_and_jump.c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	hackerrank_practice/max_element(stack).c	/^	struct stack *link;$/;"	m	struct:stack	typeref:struct:stack *	file:
link	hackerrank_practice/remove_friend(singlell_deletion).c	/^	struct node *link;$/;"	m	struct:node	typeref:struct:node *	file:
link	os_assign/sjf_algo.c	/^	struct given* link;$/;"	m	struct:given	typeref:struct:given *	file:
link	prac1/linkedlist/addatstart.c	/^	struct node* link;$/;"	m	struct:node	typeref:struct:node *	file:
link	prac1/linkedlist/appendinlist.c	/^	struct node* link;$/;"	m	struct:node	typeref:struct:node *	file:
link	prac1/permutation_numbers.c	/^	struct new *link;$/;"	m	struct:new	typeref:struct:new *	file:
m	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
main	MergeArray.c	/^int main(){$/;"	f	typeref:typename:int
main	OperationLinkedList.c	/^int main(){$/;"	f	typeref:typename:int
main	UnderstandPointer.c	/^int main(){$/;"	f	typeref:typename:int
main	array1.c	/^int main(int arc, char *argv[]){$/;"	f	typeref:typename:int
main	array2.c	/^int main(int arc, char *argv[]){$/;"	f	typeref:typename:int
main	array3.c	/^int main(int arc, char *argv[]){$/;"	f	typeref:typename:int
main	array_network.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	avgnum.c	/^int main() {$/;"	f	typeref:typename:int
main	binsearchtest.c	/^int main(int arc, char *argv[]){$/;"	f	typeref:typename:int
main	callbyref.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	callbyvalue.c	/^int main(int argc, int *argv[])$/;"	f	typeref:typename:int
main	char_pointer.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	circularQueue2.c	/^int main(){$/;"	f	typeref:typename:int
main	combinearr.c	/^int main() {$/;"	f	typeref:typename:int
main	data_structure/binarySearch.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/bubbleSort.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/calloc&free.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/circularQueue1.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/circularlinkedlist.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/doublylinkedlist.c	/^int main()$/;"	f	typeref:typename:int
main	data_structure/doublyll.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/fork.c	/^int main() {$/;"	f	typeref:typename:int
main	data_structure/linearSearch.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/loop_singlell.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/mergeSort.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/merge_2_sortedll.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/merge_sort_singlell.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/queueOperation1.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/queueOperation2.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/queue_with_stack.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/quickSort.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/reverse_singlelinkedlist.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/singlelinkedlist.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/stackOperation.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/stackOperation1.c	/^int main(){$/;"	f	typeref:typename:int
main	data_structure/stackOperation2.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	data_structure/text.c	/^int main() {$/;"	f	typeref:typename:int
main	data_structure/using_realloc.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	debug_factorial.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	default.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	delarray.c	/^int main(){$/;"	f	typeref:typename:int
main	delarray1.c	/^int main(){$/;"	f	typeref:typename:int
main	dstl_practicals/uniandint.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	dstl_practicals/unionset.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	factorial.c	/^int main(){$/;"	f	typeref:typename:int
main	fmt_vuln.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	gdb_test.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/array_que.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/bitwise-operators-in-c-English.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/bitwise-operators-in-c-English1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/box_through_a_tunnel.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/common_gcd.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/common_gcd_recursion.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/diag_pattern1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/diag_pattern2.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/diag_pattern3.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/diagonal_pattern.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/diagonal_pattern1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/digit_frequency.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/doublell_insertatend.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/equal_cylinder_stack1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/equal_cylinder_stack2.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/equal_cylinder_stack3.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/fibonacciwithprime.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/for-loop-in-c.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/hurdle_and_jump.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/longlongaddition.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/max_element(stack).c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/nth_term_recursion.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/pattern_series.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/pointer_que1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/printing_tokens.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/ques2.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/remove_friend(singlell_deletion).c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/smalltri_largetri.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/smalltri_largetri1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/sorting_array_of_strings.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/stack.c	/^int main() {$/;"	f	typeref:typename:int
main	hackerrank_practice/strcmp.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/strlen_without_libfunc.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/students_marks_sum.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hackerrank_practice/sum-of-digits-of-a-five-digit-number-English.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	hello.c	/^int main(){$/;"	f	typeref:typename:int
main	hello_arg.c	/^int main(int argc, int *argv[]){$/;"	f	typeref:typename:int
main	instacode.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	intofloat.c	/^int main()$/;"	f	typeref:typename:int
main	learnvim.c	/^int main(){$/;"	f	typeref:typename:int
main	loopWorld.c	/^int main(){$/;"	f	typeref:typename:int
main	maxrecursion.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	opll.c	/^int main(){$/;"	f	typeref:typename:int
main	os_assign/fcfs_nonpreemptive.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	os_assign/fcfs_preemptive.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	os_assign/sjf_algo.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/array_que.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/breaktosmallestrupee.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/c_version.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/car_title.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/character_counting.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/dist_points.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/dynamic_arrsum.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/dynamic_revarr(new).c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/dynamic_revarr.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/fibonacci_series.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/filecopying.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	prac1/greatest_in_four.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/happy-number.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/inputstring.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/linkedlist/addatstart.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/linkedlist/appendinlist.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/maxofthree.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/name_shortform.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pairing.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pattern_matach(infytq).c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/permutation_numbers.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/permutation_strings.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pointermath.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	prac1/pointr/func_pointer1.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pointr/pointer.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pointr/pointertofunc.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/name_found.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/name_triangle.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/only_alphabet.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/palindrome_num_c.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/palindrome_string_c.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/sort_string.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/pytoc/string_found.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/rev_char.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/weight_avg.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	prac1/year_week_days.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	primecomp.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	psinglylinkedlist.c	/^int main()$/;"	f	typeref:typename:int
main	quicksort1.c	/^int main()$/;"	f	typeref:typename:int
main	searchlinear.c	/^int main(int arc, char *argv[]){$/;"	f	typeref:typename:int
main	sec_largest.c	/^int main(int argc, char *argv[]){$/;"	f	typeref:typename:int
main	testcss1.c	/^int main(){$/;"	f	typeref:typename:int
main	vstrial.c	/^int main(){$/;"	f	typeref:typename:int
marks_summation	hackerrank_practice/students_marks_sum.c	/^int marks_summation(int *marks, int num_of_students, char gender) {$/;"	f	typeref:typename:int
mat	array3.c	/^int i, j, mat[3][3];$/;"	v	typeref:typename:int[3][3]
max_and_max	hackerrank_practice/hurdle_and_jump.c	/^struct node *max_and_max(struct node *root) {$/;"	f	typeref:struct:node *
max_display	hackerrank_practice/max_element(stack).c	/^int max_display(stack *root) {$/;"	f	typeref:typename:int
max_jump	hackerrank_practice/hurdle_and_jump.c	/^int hurdle_num, max_jump;$/;"	v	typeref:typename:int
max_of_four	prac1/greatest_in_four.c	/^int max_of_four(int a, int b, int c, int d) {$/;"	f	typeref:typename:int
merge	MergeArray.c	/^int *merge(int *a,int *b){$/;"	f	typeref:typename:int *
merge	data_structure/merge_2_sortedll.c	/^struct node *merge(struct node *root, struct node *root2) {$/;"	f	typeref:struct:node *
merge	data_structure/merge_sort_singlell.c	/^struct node *merge(struct node *root, struct node *root2) {$/;"	f	typeref:struct:node *
mheight	hackerrank_practice/box_through_a_tunnel.c	/^#define mheight /;"	d	file:
miDebuggerPath	.vscode/launch.json	/^            "miDebuggerPath": "\/usr\/bin\/gdb"$/;"	s	object:configurations.0
n	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
name	.vscode/launch.json	/^            "name": "gcc build and debug active file",$/;"	s	object:configurations.0
nchar	prac1/filecopying.c	/^typedef int nchar;$/;"	t	typeref:typename:int	file:
new	prac1/permutation_numbers.c	/^struct new {$/;"	s	file:
next	OperationLinkedList.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	circularQueue2.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	data_structure/circularlinkedlist.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	data_structure/doublylinkedlist.c	/^struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	data_structure/doublyll.c	/^	struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	data_structure/queueOperation2.c	/^	struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	hackerrank_practice/doublell_insertatend.c	/^	struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	opll.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	psinglylinkedlist.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
node	OperationLinkedList.c	/^struct node{$/;"	s	file:
node	circularQueue2.c	/^struct node{$/;"	s	file:
node	data_structure/circularlinkedlist.c	/^struct node{$/;"	s	file:
node	data_structure/doublylinkedlist.c	/^struct node$/;"	s	file:
node	data_structure/doublyll.c	/^struct node {$/;"	s	file:
node	data_structure/loop_singlell.c	/^struct node {$/;"	s	file:
node	data_structure/merge_2_sortedll.c	/^struct node {$/;"	s	file:
node	data_structure/merge_sort_singlell.c	/^struct node {$/;"	s	file:
node	data_structure/queueOperation2.c	/^struct node{$/;"	s	file:
node	data_structure/reverse_singlelinkedlist.c	/^struct node {$/;"	s	file:
node	data_structure/singlelinkedlist.c	/^struct node {$/;"	s	file:
node	data_structure/stackOperation2.c	/^struct node {$/;"	s	file:
node	hackerrank_practice/doublell_insertatend.c	/^struct node {$/;"	s	file:
node	hackerrank_practice/equal_cylinder_stack2.c	/^struct node {$/;"	s	file:
node	hackerrank_practice/hurdle_and_jump.c	/^struct node {$/;"	s	file:
node	hackerrank_practice/remove_friend(singlell_deletion).c	/^struct node {$/;"	s	file:
node	opll.c	/^struct node{$/;"	s	file:
node	prac1/linkedlist/addatstart.c	/^struct node {$/;"	s	file:
node	prac1/linkedlist/appendinlist.c	/^struct node {$/;"	s	file:
node	psinglylinkedlist.c	/^struct node$/;"	s	file:
partition	quicksort1.c	/^int partition(int a[], int beg, int end)$/;"	f	typeref:typename:int
peek	data_structure/stackOperation.c	/^int peek(int *arrst) {$/;"	f	typeref:typename:int
peek	data_structure/stackOperation2.c	/^int peek(struct node *top) {$/;"	f	typeref:typename:int
permute	prac1/permutation_numbers.c	/^void permute(int *num, int l, int p, int fact) {$/;"	f	typeref:typename:void
permute	prac1/permutation_strings.c	/^void permute(char *ch, int start, int end) {$/;"	f	typeref:typename:void
pop	data_structure/stackOperation.c	/^int pop(int *arrst) {$/;"	f	typeref:typename:int
pop	data_structure/stackOperation2.c	/^struct node *pop(struct node *top) {$/;"	f	typeref:struct:node *
pop	hackerrank_practice/max_element(stack).c	/^stack *pop(stack *root) {$/;"	f	typeref:typename:stack *
pop_stack	hackerrank_practice/equal_cylinder_stack1.c	/^int pop_stack(int *h1, int i) {$/;"	f	typeref:typename:int
pop_stack1	hackerrank_practice/equal_cylinder_stack2.c	/^int pop_stack1(struct node *root1) {$/;"	f	typeref:typename:int
pop_stack2	hackerrank_practice/equal_cylinder_stack2.c	/^int pop_stack2(struct node *root2) {$/;"	f	typeref:typename:int
pop_stack3	hackerrank_practice/equal_cylinder_stack2.c	/^int pop_stack3(struct node *root3) {$/;"	f	typeref:typename:int
preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "gcc build active file",$/;"	s	object:configurations.0
prev	data_structure/doublylinkedlist.c	/^struct node *prev;$/;"	m	struct:node	typeref:struct:node *	file:
prev	data_structure/doublyll.c	/^	struct node *prev;$/;"	m	struct:node	typeref:struct:node *	file:
prev	hackerrank_practice/doublell_insertatend.c	/^	struct node *prev;$/;"	m	struct:node	typeref:struct:node *	file:
printStacks	hackerrank_practice/equal_cylinder_stack3.c	/^void printStacks(stack Stack1, stack Stack2, stack Stack3) {$/;"	f	typeref:typename:void
pro	os_assign/sjf_algo.c	/^	int pro;$/;"	m	struct:given	typeref:typename:int	file:
program	.vscode/launch.json	/^            "program": "${fileDirname}\/${fileBasenameNoExtension}",$/;"	s	object:configurations.0
push	data_structure/stackOperation.c	/^void push(int *arrst, int val) {$/;"	f	typeref:typename:void
push	data_structure/stackOperation2.c	/^struct node *push(struct node *top, int val) {$/;"	f	typeref:struct:node *
push	hackerrank_practice/equal_cylinder_stack1.c	/^void push(int *h1, int i) {$/;"	f	typeref:typename:void
push	hackerrank_practice/max_element(stack).c	/^stack *push(stack *root) {$/;"	f	typeref:typename:stack *
push	hackerrank_practice/stack.c	/^void push(int *st, int val) {$/;"	f	typeref:typename:void
push_stack	hackerrank_practice/equal_cylinder_stack2.c	/^struct node *push_stack(struct node *root) {$/;"	f	typeref:struct:node *
q	circularQueue2.c	/^struct cirqueue *q;$/;"	v	typeref:struct:cirqueue *
q	data_structure/queueOperation2.c	/^struct queue *q;$/;"	v	typeref:struct:queue *
queue	data_structure/queueOperation2.c	/^struct queue{$/;"	s	file:
quick_sort	quicksort1.c	/^void quick_sort(int a[], int beg, int end)$/;"	f	typeref:typename:void
r	data_structure/queueOperation1.c	/^int a[size], f = -1, r = -1;$/;"	v	typeref:typename:int[]
rc	array1.c	/^int a[5][5], i, j, rc;$/;"	v	typeref:typename:int[5][5]
read_mat	array1.c	/^void read_mat(int b[5][5], int num){$/;"	f	typeref:typename:void
rear	circularQueue2.c	/^    struct node *rear;$/;"	m	struct:circqueue	typeref:struct:node *	file:
rear	data_structure/circularQueue1.c	/^int a[size],front=-1,rear=-1;$/;"	v	typeref:typename:int[]
rear	data_structure/queueOperation2.c	/^	struct node *rear;$/;"	m	struct:queue	typeref:struct:node *	file:
removeCylinder	hackerrank_practice/equal_cylinder_stack3.c	/^void removeCylinder(stack Stack)() {$/;"	f	typeref:typename:void
request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.0
rev_arr	hackerrank_practice/equal_cylinder_stack1.c	/^void rev_arr(int *h1, int i) {$/;"	f	typeref:typename:void
reverse	data_structure/reverse_singlelinkedlist.c	/^struct node *reverse(struct node *root)$/;"	f	typeref:struct:node *
root	data_structure/doublyll.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	data_structure/loop_singlell.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	data_structure/merge_2_sortedll.c	/^} *root=NULL, *root2=NULL, *tmp=NULL;$/;"	v	typeref:struct:node *
root	data_structure/merge_sort_singlell.c	/^} *root = NULL, *root2 = NULL;$/;"	v	typeref:struct:node *
root	data_structure/reverse_singlelinkedlist.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	data_structure/singlelinkedlist.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	hackerrank_practice/doublell_insertatend.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	hackerrank_practice/hurdle_and_jump.c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	hackerrank_practice/max_element(stack).c	/^} *root = NULL;$/;"	v	typeref:struct:stack *
root	hackerrank_practice/remove_friend(singlell_deletion).c	/^} *root = NULL;$/;"	v	typeref:struct:node *
root	os_assign/sjf_algo.c	/^} *root = NULL;$/;"	v	typeref:struct:given *
root	prac1/linkedlist/addatstart.c	/^} *root;$/;"	v	typeref:struct:node *
root	prac1/linkedlist/appendinlist.c	/^} *root;$/;"	v	typeref:struct:node *
root1	data_structure/queue_with_stack.c	/^} *root1 = NULL, *root2 = NULL;$/;"	v	typeref:struct:stq *
root1	hackerrank_practice/equal_cylinder_stack2.c	/^} *root1 = NULL, *root2 = NULL, *root3 = NULL;$/;"	v	typeref:struct:node *
root1	os_assign/sjf_algo.c	/^} *root1 = NULL;$/;"	v	typeref:struct:solved *
search	searchlinear.c	/^void search(int arr[], int n){$/;"	f	typeref:typename:void
secondsort	hackerrank_practice/sorting_array_of_strings.c	/^void secondsort(int count, char **arr) {$/;"	f	typeref:typename:void
selectionsort	binsearchtest.c	/^void selectionsort(int a[], int n){$/;"	f	typeref:typename:void
setupCommands	.vscode/launch.json	/^            "setupCommands": [$/;"	a	object:configurations.0
size	binsearchtest.c	/^#define size /;"	d	file:
size	combinearr.c	/^#define size /;"	d	file:
size	data_structure/circularQueue1.c	/^#define size /;"	d	file:
size	data_structure/mergeSort.c	/^#define size /;"	d	file:
size	data_structure/queueOperation1.c	/^#define size /;"	d	file:
size	data_structure/stackOperation.c	/^#define size /;"	d	file:
size	data_structure/stackOperation1.c	/^#define size /;"	d	file:
size	dstl_practicals/uniandint.c	/^#define size /;"	d	file:
size	dstl_practicals/unionset.c	/^#define size /;"	d	file:
size	hackerrank_practice/array_que.c	/^#define size /;"	d	file:
size	hackerrank_practice/bitwise-operators-in-c-English.c	/^#define size /;"	d	file:
size	hackerrank_practice/common_gcd.c	/^#define size /;"	d	file:
size	hackerrank_practice/equal_cylinder_stack1.c	/^#define size /;"	d	file:
size	hackerrank_practice/fibonacciwithprime.c	/^#define size /;"	d	file:
size	hackerrank_practice/pattern_series.c	/^#define size /;"	d	file:
size	hackerrank_practice/pointer_que1.c	/^#define size /;"	d	file:
size	hackerrank_practice/remove_friend(singlell_deletion).c	/^#define size /;"	d	file:
size	hackerrank_practice/smalltri_largetri.c	/^#define size /;"	d	file:
size	hackerrank_practice/stack.c	/^#define size /;"	d	file:
size	hackerrank_practice/strcmp.c	/^#define size /;"	d	file:
size	hackerrank_practice/strlen_without_libfunc.c	/^#define size /;"	d	file:
size	maxrecursion.c	/^#define size /;"	d	file:
size	os_assign/fcfs_nonpreemptive.c	/^#define size /;"	d	file:
size	os_assign/fcfs_preemptive.c	/^#define size /;"	d	file:
size	prac1/array_que.c	/^#define size /;"	d	file:
size	prac1/car_title.c	/^#define size /;"	d	file:
size	prac1/inputstring.c	/^#define size /;"	d	file:
size	quicksort1.c	/^#define size /;"	d	file:
size	searchlinear.c	/^#define size /;"	d	file:
size	sec_largest.c	/^#define size /;"	d	file:
solved	os_assign/sjf_algo.c	/^struct solved {$/;"	s	file:
sort	MergeArray.c	/^void sort(int *arr,int size){$/;"	f	typeref:typename:void
sort_array	hackerrank_practice/bitwise-operators-in-c-English.c	/^void sort_array(int *arr3, int s) {$/;"	f	typeref:typename:void
sort_by_area	hackerrank_practice/smalltri_largetri.c	/^void sort_by_area(int *arr1, int (*arr)[3], int n) {$/;"	f	typeref:typename:void
sort_by_area	hackerrank_practice/smalltri_largetri1.c	/^void sort_by_area(triangle* tri, int n) {$/;"	f	typeref:typename:void
sort_list	data_structure/singlelinkedlist.c	/^struct node *sort_list(struct node *root) {$/;"	f	typeref:struct:node *
sort_removedup	prac1/permutation_numbers.c	/^void sort_removedup(int *num, int l) {$/;"	f	typeref:typename:void
sorta	combinearr.c	/^void sorta(int a[], int m) {$/;"	f	typeref:typename:void
sortb	combinearr.c	/^void sortb(int b[], int n) {$/;"	f	typeref:typename:void
sorting	data_structure/merge_2_sortedll.c	/^struct node *sorting(struct node *root) {$/;"	f	typeref:struct:node *
st	hackerrank_practice/stack.c	/^int st[size], top = -1;$/;"	v	typeref:typename:int[]
stack	hackerrank_practice/equal_cylinder_stack3.c	/^} stack;$/;"	t	typeref:struct:__anon42a3d8c20108	file:
stack	hackerrank_practice/max_element(stack).c	/^struct stack {$/;"	s	file:
stack	hackerrank_practice/max_element(stack).c	/^typedef struct stack stack;$/;"	t	typeref:struct:stack	file:
stacknum	hackerrank_practice/equal_cylinder_stack3.c	/^	int stacknum;$/;"	m	struct:__anon42a3d8c20108	typeref:typename:int	file:
stackptr	hackerrank_practice/equal_cylinder_stack3.c	/^	int *stackptr;$/;"	m	struct:__anon42a3d8c20108	typeref:typename:int *	file:
stacksize	hackerrank_practice/equal_cylinder_stack3.c	/^	int stacksize;$/;"	m	struct:__anon42a3d8c20108	typeref:typename:int	file:
start	data_structure/circularlinkedlist.c	/^struct node *start = NULL;$/;"	v	typeref:struct:node *
start	data_structure/doublylinkedlist.c	/^struct node *start = NULL;$/;"	v	typeref:struct:node *
stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.0
stq	data_structure/queue_with_stack.c	/^struct stq {$/;"	s	file:
strv	prac1/pytoc/palindrome_string_c.c	/^char *strv(char * strt) {$/;"	f	typeref:typename:char *
sum	data_structure/calloc&free.c	/^int sum(int n) {$/;"	f	typeref:typename:int
sumStack	hackerrank_practice/equal_cylinder_stack3.c	/^int sumStack(stack Stack)() {$/;"	f	typeref:typename:int
swap	prac1/permutation_numbers.c	/^void swap(int *a, int *b) {$/;"	f	typeref:typename:void
swap	prac1/permutation_strings.c	/^void swap(char *x, char *y) {$/;"	f	typeref:typename:void
tat	os_assign/sjf_algo.c	/^	int tat;$/;"	m	struct:solved	typeref:typename:int	file:
temp	combinearr.c	/^int i,j,k,m,n,temp;$/;"	v	typeref:typename:int
text	.vscode/launch.json	/^                    "text": "-enable-pretty-printing",$/;"	s	object:configurations.0.setupCommands.0
thirdsort	hackerrank_practice/sorting_array_of_strings.c	/^void thirdsort(int count, char **wordlist) {$/;"	f	typeref:typename:void
top	data_structure/stackOperation.c	/^int arrst[size], top = -1;$/;"	v	typeref:typename:int[]
top	data_structure/stackOperation2.c	/^} *top=NULL;$/;"	v	typeref:struct:node *
top	hackerrank_practice/stack.c	/^int st[size], top = -1;$/;"	v	typeref:typename:int[]
total_of_arrele	hackerrank_practice/equal_cylinder_stack1.c	/^int total_of_arrele(int *h1, int i) {$/;"	f	typeref:typename:int
total_of_llele	hackerrank_practice/equal_cylinder_stack2.c	/^int total_of_llele(struct node *root) {$/;"	f	typeref:typename:int
total_pair	prac1/pairing.c	/^int total_pair(int num, int *stock) {$/;"	f	typeref:typename:int
triangle	hackerrank_practice/smalltri_largetri1.c	/^struct triangle {$/;"	s	file:
triangle	hackerrank_practice/smalltri_largetri1.c	/^typedef struct triangle triangle;$/;"	t	typeref:struct:triangle	file:
type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.0
update	prac1/pointermath.c	/^void update(int *a, int *b) {$/;"	f	typeref:typename:void
width	hackerrank_practice/box_through_a_tunnel.c	/^	int length, width, height;$/;"	m	struct:box	typeref:typename:int	file:
wt	os_assign/sjf_algo.c	/^	int wt;$/;"	m	struct:solved	typeref:typename:int	file:
x	dstl_practicals/unionset.c	/^int x,y,i,j;$/;"	v	typeref:typename:int
y	dstl_practicals/unionset.c	/^int x,y,i,j;$/;"	v	typeref:typename:int
